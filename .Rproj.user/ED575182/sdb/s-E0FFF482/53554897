{
    "contents" : "#' Calculate dirty upfront payments from conventional spread\n#'\n#' @param TDate is when the trade is executed, denoted as T. \n#' @param baseDate is the start date for the IR curve. Default is TDate. \n#' @param currency in which CDS is denominated. \n#' @param types is a string indicating the names of the instruments\n#' used for the yield curve. 'M' means money market rate; 'S' is swap\n#' rate.\n#' @param rates is an array of numeric values indicating the rate of\n#' each instrument.\n#' @param expiries is an array of characters indicating the maturity\n#' of each instrument.\n#' @param mmDCC is the day count convention of the instruments.\n#' @param fixedSwapFreq is the frequency of the fixed rate of swap\n#' being paid.\n#' @param floatSwapFreq is the frequency of the floating rate of swap\n#' being paid.\n#' @param fixedSwapDCC is the day count convention of the fixed leg.\n#' @param floatSwapDCC is the day count convention of the floating leg.\n#' @param badDayConvZC is a character indicating how non-business days\n#' are converted.\n#' @param holidays is an input for holiday files to adjust to business\n#' days.\n#' @param valueDate is the date for which the present value of the CDS\n#' is calculated. aka cash-settle date. The default is T + 3.\n#' @param benchmarkDate Accrual begin date.\n#' @param startDate is when the CDS nomially starts in terms of\n#' premium payments, i.e. the number of days in the first period (and\n#' thus the amount of the first premium payment) is counted from this\n#' date. aka accrual begin date.\n#' @param endDate aka maturity date. This is when the contract expires\n#' and protection ends. Any default after this date does not trigger a\n#' payment.\n#' @param stepinDate default is T + 1.\n#' @param maturity of the CDS contract.\n#' @param dccCDS day count convention of the CDS. Default is ACT/360.\n#' @param freqCDS date interval of the CDS contract.\n#' @param stubCDS is a character indicating the presence of a stub.\n#' @param badDayConvCDS refers to the bay day conversion for the CDS\n#' coupon payments. Default is \"F\", following.\n#' @param calendar refers to any calendar adjustment for the CDS.\n#' @param parSpread CDS par spread in bps.\n#' @param coupon quoted in bps. It specifies the payment amount from\n#' the protection buyer to the seller on a regular basis. The default\n#' is 100 bps.\n#' @param recoveryRate in decimal. Default is 0.4.\n#' @param isPriceClean refers to the type of upfront calculated. It is\n#' boolean. When \\code{TRUE}, calculate principal only. When\n#' \\code{FALSE}, calculate principal + accrual.\n#' @param payAccruedOnDefault is a partial payment of the premium made\n#' to the protection seller in the event of a default. Default is\n#' \\code{TRUE}.\n#' @param notional is the amount of the underlying asset on which the\n#' payments are based. Default is 1e7, i.e. 10MM.\n#' @return a numeric indicating the amount of upfront payments from a\n#' protection buyer's perspective.\n#' @export\n#' \n#' @examples\n#' upf <- upfront(baseDate = \"2014-01-13\", currency = \"USD\", TDate\n#' = \"2014-01-14\", maturity = \"5Y\", dccCDS = \"ACT/360\", freqCDS = \"Q\",\n#' stubCDS = \"F\", badDayConvCDS = \"F\", calendar = \"None\", parSpread =\n#' 32, coupon = 100, recoveryRate = 0.4, isPriceClean = FALSE,\n#' notional = 1e7)\n#' \n\nupfront <- function(TDate,\n                    baseDate = TDate,\n                    currency = \"USD\",\n\n                    types = NULL,\n                    rates = NULL,\n                    expiries = NULL,\n                    mmDCC = \"ACT/360\",\n                    fixedSwapFreq = \"6M\",\n                    floatSwapFreq = \"3M\",\n                    fixedSwapDCC = \"30/360\",\n                    floatSwapDCC = \"ACT/360\",\n                    badDayConvZC = \"M\",\n                    holidays = \"None\",\n                    \n                    valueDate = NULL,\n                    benchmarkDate = NULL,\n                    startDate = NULL,\n                    endDate = NULL,\n                    stepinDate = NULL,\n                    maturity = \"5Y\",\n                    \n                    dccCDS = \"ACT/360\",\n                    freqCDS = \"1Q\",\n                    stubCDS = \"F\",\n                    badDayConvCDS = \"F\",\n                    calendar = \"None\",\n                    \n                    parSpread,\n                    coupon = 100,\n                    recoveryRate = 0.4,\n                    isPriceClean = FALSE,\n                    payAccruedOnDefault = TRUE,\n                    notional = 1e7){\n\n    ratesDate <- baseDate\n    cdsDates <- getDates(TDate = as.Date(TDate), maturity = maturity)\n    if (is.null(valueDate)) valueDate <- cdsDates$valueDate\n    if (is.null(benchmarkDate)) benchmarkDate <- cdsDates$startDate\n    if (is.null(startDate)) startDate <- cdsDates$startDate\n    if (is.null(endDate)) endDate <- cdsDates$endDate\n    if (is.null(stepinDate)) stepinDate <- cdsDates$stepinDate\n\n    baseDate <- .separateYMD(baseDate)\n    today <- .separateYMD(TDate)\n    valueDate <- .separateYMD(valueDate)\n    benchmarkDate <- .separateYMD(benchmarkDate)\n    startDate <- .separateYMD(startDate)\n    endDate <- .separateYMD(endDate)\n    stepinDate <- .separateYMD(stepinDate)\n\n    stopifnot(all.equal(length(rates), length(expiries), nchar(types)))    \n    if ((is.null(types) | is.null(rates) | is.null(expiries))){\n        \n        ratesInfo <- getRates(date = ratesDate, currency = as.character(currency))\n        types = paste(as.character(ratesInfo[[1]]$type), collapse = \"\")\n        rates = as.numeric(as.character(ratesInfo[[1]]$rate))\n        expiries = as.character(ratesInfo[[1]]$expiry)\n        mmDCC = as.character(ratesInfo[[2]]$mmDCC)\n        \n        fixedSwapFreq = as.character(ratesInfo[[2]]$fixedFreq)\n        floatSwapFreq = as.character(ratesInfo[[2]]$floatFreq)\n        fixedSwapDCC = as.character(ratesInfo[[2]]$fixedDCC)\n        floatSwapDCC = as.character(ratesInfo[[2]]$floatDCC)\n        badDayConvZC = as.character(ratesInfo[[2]]$badDayConvention)\n        holidays = as.character(ratesInfo[[2]]$swapCalendars)\n    }\n\n    .Call('calcUpfrontTest',\n          baseDate,\n          types,\n          rates,\n          expiries,\n\n          mmDCC,\n          fixedSwapFreq,\n          floatSwapFreq,\n          fixedSwapDCC,\n          floatSwapDCC,\n          badDayConvZC,\n          holidays,\n          \n          today,\n          valueDate,\n          benchmarkDate,\n          startDate,\n          endDate,\n          stepinDate,\n          \n          dccCDS,\n          freqCDS,\n          stubCDS,\n          badDayConvCDS,\n          calendar,\n          \n          parSpread,\n          coupon,\n          recoveryRate,\n          isPriceClean,\n          payAccruedOnDefault,\n          notional,\n          PACKAGE = \"CDS\")\n\n}\n\n\n",
    "created" : 1401219811590.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1949659135",
    "id" : "53554897",
    "lastKnownWriteTime" : 1401193778,
    "path" : "~/Desktop/CDS7/CDS/pkg/R/upfront.R",
    "project_path" : "pkg/R/upfront.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}