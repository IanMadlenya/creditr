
R version 3.1.0 (2014-04-10) -- "Spring Dance"
Copyright (C) 2014 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "CDS"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> options(pager = "console")
> base::assign(".ExTimings", "CDS-Ex.timings", pos = 'CheckExEnv')
> base::cat("name\tuser\tsystem\telapsed\n", file=base::get(".ExTimings", pos = 'CheckExEnv'))
> base::assign(".format_ptime",
+ function(x) {
+   if(!is.na(x[4L])) x[1L] <- x[1L] + x[4L]
+   if(!is.na(x[5L])) x[2L] <- x[2L] + x[5L]
+   options(OutDec = '.')
+   format(x[1L:3L], digits = 7L)
+ },
+ pos = 'CheckExEnv')
> 
> ### * </HEADER>
> library('CDS')
Loading required package: grid
Loading required package: Rcpp
Loading required package: RCurl
Loading required package: bitops
Loading required package: XML
Warning: package 'XML' was built under R version 3.1.1
Loading required package: testthat
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("CDS")
> ### * CDS
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CDS
> ### Title: Build a 'CDS' class object given the input about a CDS contract.
> ### Aliases: CDS
> 
> ### ** Examples
> 
> # Build a simple CDS class object
> require(CDS)
> cds <- CDS(TDate = as.Date("2014-05-07"), tenor = 5, parSpread = 50, coupon = 100)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CDS", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("CS10")
> ### * CS10
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: CS10
> ### Title: 'CS10' Calculates the change in upfront value when the parSpread
> ###   rises by 10 also known as the CS10 of a contract.
> ### Aliases: CS10
> 
> ### ** Examples
> 
> x <- data.frame(dates = c(as.Date("2014-04-22"), as.Date("2014-04-22")),
+ currency = c("USD", "EUR"),
+ maturity = c(NA, NA),
+ tenor = c(5, 5),
+ spread = c(120, 110),
+ coupon = c(100, 100),
+ recoveryRate = c(0.4, 0.4),
+ notional = c(1e7, 1e7))
> result <- CS10(x)
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("CS10", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("JPY.holidays")
> ### * JPY.holidays
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: JPY.holidays
> ### Title: Japanese Holidays
> ### Aliases: JPY.holidays
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(JPY.holidays)
> ## maybe str(JPY.holidays) ; plot(JPY.holidays) ...
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("JPY.holidays", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.date")
> ### * get.date
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.date
> ### Title: 'get.date' returns appropriate dates used in pricing a CDS
> ###   contract.
> ### Aliases: get.date
> 
> ### ** Examples
> 
> get.date(as.Date("2014-05-07"), tenor = 5, maturity = NULL)
        date stepinDate  valueDate  startDate firstcouponDate pencouponDate
1 2014-05-07 2014-05-08 2014-05-12 2014-03-20      2014-06-20    2019-03-20
     endDate backstopDate
1 2019-06-20   2014-03-08
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.date", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("get.rates")
> ### * get.rates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: get.rates
> ### Title: 'get.rates' returns the deposits and swap rates for the day
> ###   input, along with the date conventions for that specific currency.
> ###   The day input should be a weekday. If not, go to the most recent
> ###   previous weekday.
> ### Aliases: get.rates
> 
> ### ** Examples
> 
> get.rates(as.Date("2014-05-07"), currency = "USD")
[[1]]
   expiry matureDate     rate type
1      1M 2014-06-09 0.001505    M
2      2M 2014-07-09 0.001893    M
3      3M 2014-08-11 0.002249    M
4      6M 2014-11-10 0.003229    M
5      1Y 2015-05-11 0.005436    M
6      2Y 2016-05-09 0.005585    S
7      3Y 2017-05-09 0.010145    S
8      4Y 2018-05-09 0.014285    S
9      5Y 2019-05-09 0.017625    S
10     6Y 2020-05-09 0.020365    S
11     7Y 2021-05-09 0.022555    S
12     8Y 2022-05-09  0.02435    S
13     9Y 2023-05-09   0.0258    S
14    10Y 2024-05-09 0.027045    S
15    12Y 2026-05-09 0.028995    S
16    15Y 2029-05-09 0.030945    S
17    20Y 2034-05-09 0.032625    S
18    25Y 2039-05-09  0.03339    S
19    30Y 2044-05-09  0.03374    S

[[2]]
     effectiveDate badDayConvention   mmDCC mmCalendars fixedDCC floatDCC
text    2014-05-07                M ACT/360        none   30/360  ACT/360
     fixedFreq floatFreq swapCalendars
text        6M        3M          none

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("get.rates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("rates")
> ### * rates
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: rates
> ### Title: Historic Interest Rates
> ### Aliases: rates rates.this upfront.data
> ### Keywords: datasets
> 
> ### ** Examples
> 
> data(rates)
> ## for JPY rates: 
> ## rates[rates$currency=="JPY",]
> ## for USD rates (similarly "USD" can be replace with "EUR" or "GBP"):
> ## rates[rates$currency=="USD",]
> ## for rates on a specific date, of a specific currency:
> ## rates[rates$currency=="JPY" & rates$date=="2005-10-01",]
> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("rates", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> cleanEx()
> nameEx("update-CDS-method")
> ### * update-CDS-method
> 
> flush(stderr()); flush(stdout())
> 
> base::assign(".ptime", proc.time(), pos = "CheckExEnv")
> ### Name: update,CDS-method
> ### Title: 'update' spread or ptsUpfront or upfront based on a new CDS
> ###   class object.
> ### Aliases: update,CDS-method
> 
> ### ** Examples
> 
> ## build a CDS class object
> cds1 <- CDS(TDate = as.Date("2014-05-07"), tenor = 5, parSpread = 50, coupon = 100)
> 
> ## update
> update(cds1, spread = 55)
CDS Contract 
Contract Type:                      SNAC   Currency:                         USD
Entity Name:                          NA   RED:                               NA
TDate:                        2014-05-07   End Date:                  2019-06-20
Start Date:                   2014-03-20   Backstop Date:             2014-03-08
1st Coupon:                   2014-06-20   Pen Coupon:                2019-03-20
Day Cnt:                         ACT/360   Freq:                               Q

Calculation 
Value Date:                   2014-05-12   Price:                         102.21
Spread:                               55   Pts Upfront:                  -0.0221
Principal:                      -220,966   Spread DV01:                    5,001
Accrual:                         -13,611   IR DV01:                        57.83
Upfront:                        -234,578   Rec Risk (1 pct):               86.75
Default Prob:                     0.0465   Default Expo:               6,220,966

Credit curve effective of 2014-05-07 
 Term     Rate Term     Rate
   1M 0.001505   7Y 0.022555
   2M 0.001893   8Y 0.024350
   3M 0.002249   9Y 0.025800
   6M 0.003229  10Y 0.027045
   1Y 0.005436  12Y 0.028995
   2Y 0.005585  15Y 0.030945
   3Y 0.010145  20Y 0.032625
   4Y 0.014285  25Y 0.033390
   5Y 0.017625  30Y 0.033740
   6Y 0.020365              

> 
> 
> 
> base::assign(".dptime", (proc.time() - get(".ptime", pos = "CheckExEnv")), pos = "CheckExEnv")
> base::cat("update-CDS-method", base::get(".format_ptime", pos = 'CheckExEnv')(get(".dptime", pos = "CheckExEnv")), "\n", file=base::get(".ExTimings", pos = 'CheckExEnv'), append=TRUE, sep="\t")
> ### * <FOOTER>
> ###
> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  2.65 0.23 18.27 NA NA 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
